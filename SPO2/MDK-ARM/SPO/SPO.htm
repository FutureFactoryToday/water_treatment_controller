<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [SPO\SPO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image SPO\SPO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Sat Jul  8 21:38:34 2023
<BR><P>
<H3>Maximum Stack Usage =        952 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; ShowMainFrame &rArr; ShowServiceMenuFrame &rArr; ShowAlarmNotiServiceFrame &rArr; ShowAlarmListFrame &rArr; TSF_showFrame &rArr; CAL_showFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[71]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[30]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[165]">PL_Planner</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">PL_ProceedStep</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC1_2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4d]">ADC3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[18]">BusFault_Handler</a> from stm32f1xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[33]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[34]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[29]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel4_IRQHandler</a> from lcd_io_spi.o(.text.DMA1_Channel4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel5_IRQHandler</a> from lcd_io_spi.o(.text.DMA1_Channel5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[56]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[57]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[58]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[59]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1b]">DebugMon_Handler</a> from stm32f1xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[24]">EXTI0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[46]">EXTI15_10_IRQHandler</a> from stm32f1xx_it.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[25]">EXTI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[26]">EXTI2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[27]">EXTI3_IRQHandler</a> from stm32f1xx_it.o(.text.EXTI3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[28]">EXTI4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[35]">EXTI9_5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[22]">FLASH_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4e]">FSMC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[16]">HardFault_Handler</a> from stm32f1xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3e]">I2C1_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3d]">I2C1_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[40]">I2C2_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3f]">I2C2_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[17]">MemManage_Handler</a> from stm32f1xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[15]">NMI_Handler</a> from stm32f1xx_it.o(.text.NMI_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[5c]">PL_ProceedStep</a> from planner.o(.text.PL_ProceedStep) referenced 2 times from planner.o(.text.PL_Planner)
 <LI><a href="#[5c]">PL_ProceedStep</a> from planner.o(.text.PL_ProceedStep) referenced 2 times from planner.o(.text.PL_ProceedStep)
 <LI><a href="#[1f]">PVD_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1c]">PendSV_Handler</a> from stm32f1xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[23]">RCC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[47]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[21]">RTC_IRQHandler</a> from stm32f1xx_it.o(.text.RTC_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[14]">Reset_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4f]">SDIO_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[41]">SPI1_IRQHandler</a> from stm32f1xx_it.o(.text.SPI1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[42]">SPI2_IRQHandler</a> from stm32f1xx_it.o(.text.SPI2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[51]">SPI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1a]">SVC_Handler</a> from stm32f1xx_it.o(.text.SVC_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1d]">SysTick_Handler</a> from stm32f1xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[5a]">SystemInit</a> from system_stm32f1xx.o(.text.SystemInit) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[20]">TAMPER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[36]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[39]">TIM1_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[38]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[37]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3a]">TIM2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3b]">TIM3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3c]">TIM4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[50]">TIM5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[54]">TIM6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[55]">TIM7_IRQHandler</a> from stm32f1xx_it.o(.text.TIM7_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[49]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4c]">TIM8_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[52]">UART4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[53]">UART5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[43]">USART1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[44]">USART2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[45]">USART3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[48]">USBWakeUp_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[31]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[32]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[19]">UsageFault_Handler</a> from stm32f1xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1e]">WWDG_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[5b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[3]">ili9488_DisplayOff</a> from ili9488.o(.text.ili9488_DisplayOff) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[2]">ili9488_DisplayOn</a> from ili9488.o(.text.ili9488_DisplayOn) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[c]">ili9488_DrawBitmap</a> from ili9488.o(.text.ili9488_DrawBitmap) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[8]">ili9488_DrawHLine</a> from ili9488.o(.text.ili9488_DrawHLine) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[d]">ili9488_DrawRGBImage</a> from ili9488.o(.text.ili9488_DrawRGBImage) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[9]">ili9488_DrawVLine</a> from ili9488.o(.text.ili9488_DrawVLine) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[e]">ili9488_FillRect</a> from ili9488.o(.text.ili9488_FillRect) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[b]">ili9488_GetLcdPixelHeight</a> from ili9488.o(.text.ili9488_GetLcdPixelHeight) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[a]">ili9488_GetLcdPixelWidth</a> from ili9488.o(.text.ili9488_GetLcdPixelWidth) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[0]">ili9488_Init</a> from ili9488.o(.text.ili9488_Init) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[1]">ili9488_ReadID</a> from ili9488.o(.text.ili9488_ReadID) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[6]">ili9488_ReadPixel</a> from ili9488.o(.text.ili9488_ReadPixel) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[f]">ili9488_ReadRGBImage</a> from ili9488.o(.text.ili9488_ReadRGBImage) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[10]">ili9488_Scroll</a> from ili9488.o(.text.ili9488_Scroll) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[4]">ili9488_SetCursor</a> from ili9488.o(.text.ili9488_SetCursor) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[7]">ili9488_SetDisplayWindow</a> from ili9488.o(.text.ili9488_SetDisplayWindow) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[5]">ili9488_WritePixel</a> from ili9488.o(.text.ili9488_WritePixel) referenced 2 times from ili9488.o(.data.ili9488_drv)
 <LI><a href="#[12]">ili9488_ts_DetectTouch</a> from ili9488.o(.text.ili9488_ts_DetectTouch) referenced 2 times from ili9488.o(.data.ili9488_ts_drv)
 <LI><a href="#[13]">ili9488_ts_GetXY</a> from ili9488.o(.text.ili9488_ts_GetXY) referenced 2 times from ili9488.o(.data.ili9488_ts_drv)
 <LI><a href="#[11]">ili9488_ts_Init</a> from ili9488.o(.text.ili9488_ts_Init) referenced 2 times from ili9488.o(.data.ili9488_ts_drv)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[228]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[229]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[22a]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[22b]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[22c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[63]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[22d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[22e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[22f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[230]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[231]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[232]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[233]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[234]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[235]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[236]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[237]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[238]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[239]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[23a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[23b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[23c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[23d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[23e]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[23f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[240]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[241]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[242]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[68]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[243]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[244]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[245]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[246]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[247]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[248]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[249]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[24a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[60]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[62]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[24b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[64]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ShowMainFrame &rArr; ShowServiceMenuFrame &rArr; ShowAlarmNotiServiceFrame &rArr; ShowAlarmListFrame &rArr; TSF_showFrame &rArr; CAL_showFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[24c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[72]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[67]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[24d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[69]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[14]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyOneTaskToFlash
</UL>

<P><STRONG><a name="[24e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>

<P><STRONG><a name="[251]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = localtime &rArr; _localtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[6d]"></a>mktime</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAlarm
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countDaysBetween
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcTimeToInt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSysTime
</UL>

<P><STRONG><a name="[254]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _localtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[257]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[259]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[66]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[17e]"></a>ALARM_INTERRUPT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, alarm.o(.text.ALARM_INTERRUPT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ALARM_INTERRUPT
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>BSP_LCD_Clear</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_LCD_Clear &rArr; BSP_LCD_GetYSize
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGUI
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[76]"></a>BSP_LCD_DisplayChar</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCharIndex
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>

<P><STRONG><a name="[79]"></a>BSP_LCD_DisplayStringAt</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_DisplayStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStringWidth
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCharIndex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawYear
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMonth
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashTimCustFrame
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDaysBetweenRegenCustFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarMenuFrame
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResultFromKeyboard
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_showFrame
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarLabel
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarServiceMenuFrame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarSofteningFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[7b]"></a>BSP_LCD_DrawBitmap</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGUI
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawChar
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScrollButton
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[7d]"></a>BSP_LCD_DrawCircle</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_LCD_DrawCircle &rArr; BSP_LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>

<P><STRONG><a name="[7f]"></a>BSP_LCD_DrawHLine</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_LCD_DrawHLine &rArr; BSP_LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_showFrame
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>

<P><STRONG><a name="[80]"></a>BSP_LCD_DrawLine</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_LCD_DrawLine &rArr; BSP_LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStaticLines
</UL>

<P><STRONG><a name="[7e]"></a>BSP_LCD_DrawPixel</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCircle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
</UL>

<P><STRONG><a name="[81]"></a>BSP_LCD_DrawRect</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_DrawRect &rArr; BSP_LCD_DrawVLine &rArr; BSP_LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[82]"></a>BSP_LCD_DrawVLine</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_LCD_DrawVLine &rArr; BSP_LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
</UL>

<P><STRONG><a name="[83]"></a>BSP_LCD_FillCircle</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LCD_FillCircle &rArr; BSP_LCD_DrawCircle &rArr; BSP_LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScrollButton
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillArcRec
</UL>

<P><STRONG><a name="[182]"></a>BSP_LCD_FillRect</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGUI
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCursor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScrollButton
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarLabel
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillArcRec
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1fd]"></a>BSP_LCD_GetBackColor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_GetBackColor))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillArcRec
</UL>

<P><STRONG><a name="[92]"></a>BSP_LCD_GetFont</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_GetFont))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSF_showFrame
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMidClock
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[181]"></a>BSP_LCD_GetTextColor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_GetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCursor
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillArcRec
</UL>

<P><STRONG><a name="[74]"></a>BSP_LCD_GetXSize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_GetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawYear
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMonth
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_showFrame
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSF_showFrame
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMidClock
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRegenPeriodServiceFrame
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashingTimeServiceFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_showFrame
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarLabel
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceDateSelectFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[75]"></a>BSP_LCD_GetYSize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LCD_GetYSize
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawYear
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMonth
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_showFrame
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSF_showFrame
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarMenuFrame
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRegenPeriodServiceFrame
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashingTimeServiceFrame
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarLabel
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStaticLines
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceDateSelectFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarServiceMenuFrame
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLoadTypeFrame
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarSofteningFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSofteningFrame
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilterSelectionFrame
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markLines
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilteringFrame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[85]"></a>BSP_LCD_Init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_Init &rArr; BSP_LCD_Clear &rArr; BSP_LCD_GetYSize
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGUI
</UL>

<P><STRONG><a name="[164]"></a>BSP_LCD_SetBackColor</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_SetBackColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BSP_LCD_SetBackColor
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawYear
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMonth
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashTimCustFrame
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDaysBetweenRegenCustFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarMenuFrame
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResultFromKeyboard
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_showFrame
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarLabel
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillArcRec
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarServiceMenuFrame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarSofteningFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1f2]"></a>BSP_LCD_SetFont</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BSP_LCD_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGUI
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[84]"></a>BSP_LCD_SetTextColor</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32_adafruit_lcd.o(.text.BSP_LCD_SetTextColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BSP_LCD_SetTextColor
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGUI
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawYear
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMonth
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashTimCustFrame
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDaysBetweenRegenCustFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarMenuFrame
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResultFromKeyboard
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCursor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_showFrame
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScrollButton
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarLabel
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStaticLines
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillArcRec
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarServiceMenuFrame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarSofteningFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[86]"></a>BSP_TS_GetState</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, stm32_adafruit_ts.o(.text.BSP_TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_TS_GetState &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[18]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>CAL_showFrame</STRONG> (Thumb, 892 bytes, Stack size 136 bytes, calendar.o(.text.CAL_showFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = CAL_showFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSec
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxDayInMonth
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
</UL>

<P><STRONG><a name="[90]"></a>CSF_showFrame</STRONG> (Thumb, 630 bytes, Stack size 96 bytes, clockset.o(.text.CSF_showFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = CSF_showFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetFont
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashingTimeServiceFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
</UL>

<P><STRONG><a name="[2c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, lcd_io_spi.o(.text.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; LCD_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, lcd_io_spi.o(.text.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Delay
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI15_10_IRQHandler &rArr; PC_OpticSensInterrupt &rArr; MOT_Stop &rArr; MOT_Brake &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Sense_Interrupt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OpticSensInterrupt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag_0_31
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag_0_31
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f1xx_it.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI3_IRQHandler &rArr; TC_checkButtons &rArr; isInRectangle
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_releaseButtons
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_checkButtons
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag_0_31
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag_0_31
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1cb]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxDayInMonth
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
</UL>

<P><STRONG><a name="[1cd]"></a>FM_OVF_Interrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flowmeter.o(.text.FM_OVF_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>FM_Sense_Interrupt</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, flowmeter.o(.text.FM_Sense_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FM_Sense_Interrupt &rArr; filter &rArr; isFiltered
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>FM_getFlowSpeed</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, flowmeter.o(.text.FM_getFlowSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FM_getFlowSpeed &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_incFlowMeter
</UL>

<P><STRONG><a name="[a3]"></a>FM_incFlowMeter</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, flowmeter.o(.text.FM_incFlowMeter))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FM_incFlowMeter &rArr; FM_getFlowSpeed &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_getFlowSpeed
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>FP_DeleteParam</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, flashparam.o(.text.FP_DeleteParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FP_DeleteParam
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockFlash
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
</UL>

<P><STRONG><a name="[ab]"></a>FP_GetParam</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flashparam.o(.text.FP_GetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FP_GetParam &rArr; loadParams
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParams
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>FP_SaveParam</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, flashparam.o(.text.FP_SaveParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FP_SaveParam &rArr; FP_DeleteParam
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockFlash
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlockFlash
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_DeleteParam
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ProceedStep
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRegenPeriodServiceFrame
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashingTimeServiceFrame
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceInfoFrame
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWaterCountBeforeRegenFrame
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLoadTypeFrame
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSofteningFrame
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilterSelectionFrame
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilteringFrame
</UL>

<P><STRONG><a name="[16]"></a>HardFault_Handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f1xx_it.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardFault_Handler &rArr; LL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>LCD_Delay</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lcd_io_spi.o(.text.LCD_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Delay &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>

<P><STRONG><a name="[204]"></a>LCD_IO_Bl_OnOff</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, lcd_io_spi.o(.text.LCD_IO_Bl_OnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_IO_Bl_OnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_DisplayOff
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_DisplayOn
</UL>

<P><STRONG><a name="[94]"></a>LCD_IO_Delay</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lcd_io_spi.o(.text.LCD_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadMultiData16to24
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCmdWrite8
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite8
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDirWrite
</UL>

<P><STRONG><a name="[b1]"></a>LCD_IO_Init</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lcd_io_spi.o(.text.LCD_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_IO_Init &rArr; LCD_Delay &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_ts_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_Init
</UL>

<P><STRONG><a name="[b5]"></a>LCD_IO_ReadCmd8MultipleData24to16</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcd_io_spi.o(.text.LCD_IO_ReadCmd8MultipleData24to16))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_IO_ReadCmd8MultipleData24to16 &rArr; LCD_IO_ReadMultiData16to24 &rArr; LcdDirWrite &rArr; LCD_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadMultiData16to24
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForDmaEnd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCmdWrite8
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDirRead
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetDataWidth
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_ReadRGBImage
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_ReadPixel
</UL>

<P><STRONG><a name="[bb]"></a>LCD_IO_ReadCmd8MultipleData8</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcd_io_spi.o(.text.LCD_IO_ReadCmd8MultipleData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_IO_ReadCmd8MultipleData8 &rArr; LCD_IO_ReadMultiData8 &rArr; LcdDirWrite &rArr; LCD_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadMultiData8
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForDmaEnd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCmdWrite8
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDirRead
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetDataWidth
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_ReadID
</UL>

<P><STRONG><a name="[be]"></a>LCD_IO_ReadMultiData</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, lcd_io_spi.o(.text.LCD_IO_ReadMultiData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_IO_ReadMultiData
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadMultiData8
</UL>

<P><STRONG><a name="[ba]"></a>LCD_IO_ReadMultiData16to24</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, lcd_io_spi.o(.text.LCD_IO_ReadMultiData16to24))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_IO_ReadMultiData16to24 &rArr; LcdDirWrite &rArr; LCD_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Delay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDirWrite
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData24to16
</UL>

<P><STRONG><a name="[bc]"></a>LCD_IO_ReadMultiData8</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lcd_io_spi.o(.text.LCD_IO_ReadMultiData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_IO_ReadMultiData8 &rArr; LcdDirWrite &rArr; LCD_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadMultiData
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForDmaEnd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDirWrite
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData8
</UL>

<P><STRONG><a name="[bf]"></a>LCD_IO_WriteCmd8</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcd_io_spi.o(.text.LCD_IO_WriteCmd8))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_IO_WriteCmd8 &rArr; LcdCmdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForDmaEnd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCmdWrite8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetDataWidth
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_DrawRGBImage
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_DrawBitmap
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_SetDisplayWindow
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_ReadPixel
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_WritePixel
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_SetCursor
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_DisplayOff
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_DisplayOn
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_Init
</UL>

<P><STRONG><a name="[c0]"></a>LCD_IO_WriteCmd8DataFill16</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcd_io_spi.o(.text.LCD_IO_WriteCmd8DataFill16))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_IO_WriteCmd8DataFill16 &rArr; LCD_IO_WriteMultiData16 &rArr; LCD_IO_WriteMultiData &rArr; LL_SPI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForDmaEnd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCmdWrite8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetDataWidth
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_Scroll
</UL>

<P><STRONG><a name="[c2]"></a>LCD_IO_WriteCmd8DataFill8</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lcd_io_spi.o(.text.LCD_IO_WriteCmd8DataFill8))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_IO_WriteCmd8DataFill8 &rArr; LCD_IO_WriteMultiData &rArr; LL_SPI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForDmaEnd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCmdWrite8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetDataWidth
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_FillRect
</UL>

<P><STRONG><a name="[c4]"></a>LCD_IO_WriteCmd8MultipleData16</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcd_io_spi.o(.text.LCD_IO_WriteCmd8MultipleData16))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_IO_WriteCmd8MultipleData16 &rArr; LCD_IO_WriteMultiData16 &rArr; LCD_IO_WriteMultiData &rArr; LL_SPI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForDmaEnd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCmdWrite8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetDataWidth
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_Scroll
</UL>

<P><STRONG><a name="[c5]"></a>LCD_IO_WriteCmd8MultipleData8</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcd_io_spi.o(.text.LCD_IO_WriteCmd8MultipleData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_IO_WriteCmd8MultipleData8 &rArr; LCD_IO_WriteMultiData8 &rArr; LCD_IO_WriteMultiData &rArr; LL_SPI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData8
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForDmaEnd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCmdWrite8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetDataWidth
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_DrawBitmap
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_Init
</UL>

<P><STRONG><a name="[c7]"></a>LCD_IO_WriteData8</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcd_io_spi.o(.text.LCD_IO_WriteData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_IO_WriteData8 &rArr; LcdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForDmaEnd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetDataWidth
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_DrawBitmap
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_SetDisplayWindow
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_ReadPixel
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_write16to24
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_WritePixel
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_SetCursor
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_Init
</UL>

<P><STRONG><a name="[c3]"></a>LCD_IO_WriteMultiData</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lcd_io_spi.o(.text.LCD_IO_WriteMultiData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_IO_WriteMultiData &rArr; LL_SPI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Enable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_EnableDMAReq_TX
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8DataFill8
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData16
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData8
</UL>

<P><STRONG><a name="[c1]"></a>LCD_IO_WriteMultiData16</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, lcd_io_spi.o(.text.LCD_IO_WriteMultiData16))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_IO_WriteMultiData16 &rArr; LCD_IO_WriteMultiData &rArr; LL_SPI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForDmaEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData16
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8DataFill16
</UL>

<P><STRONG><a name="[c6]"></a>LCD_IO_WriteMultiData8</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lcd_io_spi.o(.text.LCD_IO_WriteMultiData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_IO_WriteMultiData8 &rArr; LCD_IO_WriteMultiData &rArr; LL_SPI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForDmaEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData8
</UL>

<P><STRONG><a name="[206]"></a>LCD_IO_isBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_io_spi.o(.text.LCD_IO_isBusy))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_FillRect
</UL>

<P><STRONG><a name="[cc]"></a>LL_ADC_CommonInit</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ADC_CommonInit &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[cf]"></a>LL_ADC_Init</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_ADC_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[d0]"></a>LL_ADC_REG_Init</STRONG> (Thumb, 914 bytes, Stack size 24 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_REG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_ADC_REG_Init &rArr; LL_ADC_REG_SetSequencerLength
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerLength
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[d2]"></a>LL_EXTI_Init</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, stm32f1xx_ll_exti.o(.text.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_EXTI_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig_0_31
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableRisingTrig_0_31
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig_0_31
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableFallingTrig_0_31
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableEvent_0_31
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_0_31
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_0_31
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableEvent_0_31
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[db]"></a>LL_GPIO_Init</STRONG> (Thumb, 558 bytes, Stack size 32 bytes, stm32f1xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_GPIO_Init &rArr; LL_GPIO_SetPinOutputType
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[e0]"></a>LL_Init1msTick</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f1xx_ll_utils.o(.text.LL_Init1msTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_Init1msTick &rArr; LL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e2]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[e7]"></a>LL_RTC_ALARM_Init</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_ALARM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_RTC_ALARM_Init &rArr; LL_RTC_ExitInitMode &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ExitInitMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ALARM_Set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[1db]"></a>LL_RTC_ALARM_StructInit</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_ALARM_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_ALARM_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[e8]"></a>LL_RTC_EnterInitMode</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RTC_EnterInitMode &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_IsActiveCounterFlag
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsActiveFlag_RTOF
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableWriteProtection
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ALARM_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAlarm
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSysTime
</UL>

<P><STRONG><a name="[ea]"></a>LL_RTC_ExitInitMode</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RTC_ExitInitMode &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_IsActiveCounterFlag
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsActiveFlag_RTOF
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableWriteProtection
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ALARM_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAlarm
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSysTime
</UL>

<P><STRONG><a name="[ef]"></a>LL_RTC_Init</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_RTC_Init &rArr; LL_RTC_WaitForSynchro &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ExitInitMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_SetAsynchPrescaler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_SetOutputSource
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TAMPER_Disable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ClearFlag_SEC
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ClearFlag_OW
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ClearFlag_ALR
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[f7]"></a>LL_RTC_TIME_Init</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_TIME_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_RTC_TIME_Init &rArr; LL_RTC_ExitInitMode &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ExitInitMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[f0]"></a>LL_RTC_WaitForSynchro</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RTC_WaitForSynchro &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsActiveFlag_RS
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_IsActiveCounterFlag
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ClearFlag_RS
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[fb]"></a>LL_SPI_Init</STRONG> (Thumb, 678 bytes, Stack size 24 bytes, stm32f1xx_ll_spi.o(.text.LL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_SPI_Init &rArr; LL_SPI_SetCRCPolynomial
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetCRCPolynomial
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsEnabled
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[1c8]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f1xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SetSystemCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fe]"></a>LL_TIM_BDTR_Init</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_BDTR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_TIM_BDTR_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
</UL>

<P><STRONG><a name="[ff]"></a>LL_TIM_Init</STRONG> (Thumb, 762 bytes, Stack size 24 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_TIM_Init &rArr; LL_TIM_SetRepetitionCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetRepetitionCounter
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[104]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_TIM_OC_Init &rArr; OC4Config &rArr; LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[109]"></a>LL_USART_Init</STRONG> (Thumb, 680 bytes, Stack size 40 bytes, stm32f1xx_ll_usart.o(.text.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetHWFlowCtrl
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetStopBitsLength
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabled
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[87]"></a>LL_mDelay</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f1xx_ll_utils.o(.text.LL_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGUI
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
</UL>

<P><STRONG><a name="[b8]"></a>LcdCmdWrite8</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lcd_io_spi.o(.text.LcdCmdWrite8))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LcdCmdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Delay
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_BSY
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData24to16
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData8
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8DataFill8
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData16
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData8
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8DataFill16
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
</UL>

<P><STRONG><a name="[b9]"></a>LcdDirRead</STRONG> (Thumb, 124 bytes, Stack size 4 bytes, lcd_io_spi.o(.text.LcdDirRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LcdDirRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData24to16
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData8
</UL>

<P><STRONG><a name="[bd]"></a>LcdDirWrite</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lcd_io_spi.o(.text.LcdDirWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LcdDirWrite &rArr; LCD_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadMultiData16to24
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadMultiData8
</UL>

<P><STRONG><a name="[c8]"></a>LcdWrite8</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd_io_spi.o(.text.LcdWrite8))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LcdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Delay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_BSY
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData8
</UL>

<P><STRONG><a name="[110]"></a>MOT_Brake</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, motor.o(.text.MOT_Brake))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MOT_Brake &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH3
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH2
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Stop
</UL>

<P><STRONG><a name="[114]"></a>MOT_Forward</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, motor.o(.text.MOT_Forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MOT_Forward &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH3
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH2
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Start
</UL>

<P><STRONG><a name="[160]"></a>MOT_GetControl</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, motor.o(.text.MOT_GetControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MOT_GetControl
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OpticSensInterrupt
</UL>

<P><STRONG><a name="[116]"></a>MOT_Reverse</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, motor.o(.text.MOT_Reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MOT_Reverse &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH3
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH2
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Start
</UL>

<P><STRONG><a name="[117]"></a>MOT_SetDir</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, motor.o(.text.MOT_SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MOT_SetDir &rArr; MOT_Stop &rArr; MOT_Brake &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Stop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_GoToPoz
</UL>

<P><STRONG><a name="[11a]"></a>MOT_SetSpeed</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, motor.o(.text.MOT_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MOT_SetSpeed &rArr; MOT_Start &rArr; MOT_Reverse &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_GoToPoz
</UL>

<P><STRONG><a name="[119]"></a>MOT_Start</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, motor.o(.text.MOT_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MOT_Start &rArr; MOT_Reverse &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Reverse
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Forward
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_SetSpeed
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_SetDir
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_GoToPoz
</UL>

<P><STRONG><a name="[118]"></a>MOT_Stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, motor.o(.text.MOT_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MOT_Stop &rArr; MOT_Brake &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Brake
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_SetDir
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OpticSensInterrupt
</UL>

<P><STRONG><a name="[11b]"></a>MX_ADC1_Init</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, adc.o(.text.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinOutputType
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_CommonInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>MX_ADC2_Init</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, adc.o(.text.MX_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_ADC2_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinOutputType
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>MX_DMA_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_DMA_Init &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>MX_GPIO_Init</STRONG> (Thumb, 460 bytes, Stack size 104 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinOutputType
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_AF_SetEXTISource
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>MX_RTC_Init</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, rtc.o(.text.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_RTC_Init &rArr; LL_RTC_TIME_Init &rArr; LL_RTC_ExitInitMode &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_SetAsynchPrescaler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_EnableRTC
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>MX_SPI1_Init</STRONG> (Thumb, 178 bytes, Stack size 96 bytes, spi.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MX_SPI1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinOutputType
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>MX_SPI2_Init</STRONG> (Thumb, 258 bytes, Stack size 96 bytes, spi.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MX_SPI2_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinOutputType
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>MX_SPI3_Init</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, spi.o(.text.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = MX_SPI3_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinOutputType
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>MX_TIM3_Init</STRONG> (Thumb, 222 bytes, Stack size 104 bytes, tim.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_TIM3_Init &rArr; LL_TIM_OC_Init &rArr; OC4Config &rArr; LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_AF_EnableRemap_TIM3
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_CC_EnableChannel
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH1
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableAllOutputs
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableMasterSlaveMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_DisableFast
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableARRPreload
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>MX_TIM4_Init</STRONG> (Thumb, 186 bytes, Stack size 96 bytes, tim.o(.text.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_TIM4_Init &rArr; LL_TIM_OC_Init &rArr; OC4Config &rArr; LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableMasterSlaveMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_DisableFast
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableARRPreload
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>MX_TIM8_Init</STRONG> (Thumb, 276 bytes, Stack size 128 bytes, tim.o(.text.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MX_TIM8_Init &rArr; LL_TIM_OC_Init &rArr; OC4Config &rArr; LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_BDTR_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableMasterSlaveMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_DisableFast
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableARRPreload
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_USART1_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>PC_GoToPoz</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, pistoncontrol.o(.text.PC_GoToPoz))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PC_GoToPoz &rArr; MOT_SetSpeed &rArr; MOT_Start &rArr; MOT_Reverse &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_SetSpeed
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_SetDir
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ProceedStep
</UL>

<P><STRONG><a name="[99]"></a>PC_OpticSensInterrupt</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, pistoncontrol.o(.text.PC_OpticSensInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PC_OpticSensInterrupt &rArr; MOT_Stop &rArr; MOT_Brake &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_GetControl
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>PC_isBusy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pistoncontrol.o(.text.PC_isBusy))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
</UL>

<P><STRONG><a name="[161]"></a>PIN_showFrame</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, pincode.o(.text.PIN_showFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = PIN_showFrame &rArr; callKeyboardFromPin &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callKeyboardFromPin
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainFrame
</UL>

<P><STRONG><a name="[165]"></a>PL_Planner</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, planner.o(.text.PL_Planner))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = PL_Planner &rArr;  PL_ProceedStep (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ProceedStep
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAlarm
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareDateTime
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroDateTime
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSec
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDay
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_isBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ProceedStep
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDelayedRegenCustFrame
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowForcedRegenCustFrame
</UL>

<P><STRONG><a name="[5c]"></a>PL_ProceedStep</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, planner.o(.text.PL_ProceedStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PL_ProceedStep &rArr; PL_Planner &rArr;  PL_ProceedStep (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyTasksToFlash
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAlarm
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSec
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_GoToPoz
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
</UL>
<BR>[Address Reference Count : 2]<UL><LI> planner.o(.text.PL_Planner)
<LI> planner.o(.text.PL_ProceedStep)
</UL>
<P><STRONG><a name="[1c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[170]"></a>PrintResultFromKeyboard</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, keyboardframe.o(.text.PrintResultFromKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PrintResultFromKeyboard &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillArcRec
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
</UL>

<P><STRONG><a name="[e4]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f1xx_ll_rcc.o(.text.RCC_GetHCLKClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetHCLKClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[e5]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f1xx_ll_rcc.o(.text.RCC_GetPCLK1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetPCLK1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[e6]"></a>RCC_GetPCLK2ClockFreq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f1xx_ll_rcc.o(.text.RCC_GetPCLK2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetPCLK2ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[e3]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f1xx_ll_rcc.o(.text.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[177]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f1xx_ll_rcc.o(.text.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMultiplicator
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetPrediv
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RTC_IRQHandler &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALARM_INTERRUPT
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_incFlowMeter
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Interrupt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ClearFlag_ALR
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsActiveFlag_ALR
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ClearFlag_SEC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>RTC_Interrupt</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, time.o(.text.RTC_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_Interrupt &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxDayInMonth
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>RefreshCursor</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, keyboardframe.o(.text.RefreshCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RefreshCursor &rArr; BSP_LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetTextColor
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
</UL>

<P><STRONG><a name="[183]"></a>RefreshScrollBarMenuFrame</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, menuframe.o(.text.RefreshScrollBarMenuFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RefreshScrollBarMenuFrame &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScrollButton
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStaticLines
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillArcRec
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
</UL>

<P><STRONG><a name="[187]"></a>RefreshScrollBarServiceMenuFrame</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, servicemenuframe.o(.text.RefreshScrollBarServiceMenuFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RefreshScrollBarServiceMenuFrame &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScrollButton
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStaticLines
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillArcRec
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
</UL>

<P><STRONG><a name="[189]"></a>RefreshScrollBarSofteningFrame</STRONG> (Thumb, 814 bytes, Stack size 160 bytes, softeningframe.o(.text.RefreshScrollBarSofteningFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = RefreshScrollBarSofteningFrame &rArr; drawTextLabel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScrollButton
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStaticLines
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillArcRec
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSofteningFrame
</UL>

<P><STRONG><a name="[41]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[18b]"></a>ShowAlarmListFrame</STRONG> (Thumb, 614 bytes, Stack size 8 bytes, alarmlistframe.o(.text.ShowAlarmListFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ShowAlarmListFrame &rArr; TSF_showFrame &rArr; CAL_showFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashTimCustFrame
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDaysBetweenRegenCustFrame
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDelayedRegenCustFrame
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowForcedRegenCustFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmNotiServiceFrame
</UL>

<P><STRONG><a name="[192]"></a>ShowAlarmNotiServiceFrame</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, alarmnotiframe.o(.text.ShowAlarmNotiServiceFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ShowAlarmNotiServiceFrame &rArr; ShowAlarmListFrame &rArr; TSF_showFrame &rArr; CAL_showFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmListFrame
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainFrame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
</UL>

<P><STRONG><a name="[191]"></a>ShowDaysBetweenRegenCustFrame</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, daysbetweenregencustomerframe.o(.text.ShowDaysBetweenRegenCustFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ShowDaysBetweenRegenCustFrame &rArr; createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmListFrame
</UL>

<P><STRONG><a name="[190]"></a>ShowDelayedRegenCustFrame</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, delayedregencustomerframe.o(.text.ShowDelayedRegenCustFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ShowDelayedRegenCustFrame &rArr; createFrame &rArr; showRemeiningTime &rArr; timeRemain &rArr; decDateTime &rArr; decSec &rArr; decMinute &rArr; decHour &rArr; decDay &rArr; decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmListFrame
</UL>

<P><STRONG><a name="[198]"></a>ShowFilterSelectionFrame</STRONG> (Thumb, 846 bytes, Stack size 56 bytes, filterselectionframe.o(.text.ShowFilterSelectionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ShowFilterSelectionFrame &rArr; ShowSofteningFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSofteningFrame
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markLines
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilteringFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
</UL>

<P><STRONG><a name="[19a]"></a>ShowFilteringFrame</STRONG> (Thumb, 566 bytes, Stack size 64 bytes, filteringframe.o(.text.ShowFilteringFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ShowFilteringFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyTasksToFlash
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilterSelectionFrame
</UL>

<P><STRONG><a name="[18f]"></a>ShowForcedRegenCustFrame</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, forcedregencustomerframe.o(.text.ShowForcedRegenCustFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ShowForcedRegenCustFrame &rArr; createFrame &rArr; showRemeiningTime &rArr; timeRemain &rArr; decDateTime &rArr; decSec &rArr; decMinute &rArr; decHour &rArr; decDay &rArr; decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmListFrame
</UL>

<P><STRONG><a name="[8e]"></a>ShowKeyboardFrame</STRONG> (Thumb, 2152 bytes, Stack size 128 bytes, keyboardframe.o(.text.ShowKeyboardFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResultFromKeyboard
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCursor
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_showFrame
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSF_showFrame
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRegenPeriodServiceFrame
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWaterCountBeforeRegenFrame
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callKeyboardFromPin
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSofteningFrame
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilteringFrame
</UL>

<P><STRONG><a name="[1a1]"></a>ShowMainFrame</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, mainframe.o(.text.ShowMainFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = ShowMainFrame &rArr; ShowServiceMenuFrame &rArr; ShowAlarmNotiServiceFrame &rArr; ShowAlarmListFrame &rArr; TSF_showFrame &rArr; CAL_showFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmNotiServiceFrame
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_showFrame
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>ShowMenuFrame</STRONG> (Thumb, 1060 bytes, Stack size 56 bytes, menuframe.o(.text.ShowMenuFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = ShowMenuFrame &rArr; TSF_showFrame &rArr; CAL_showFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarMenuFrame
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRegenPeriodServiceFrame
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDelayedRegenCustFrame
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowForcedRegenCustFrame
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashingTimeServiceFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillArcRec
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainFrame
</UL>

<P><STRONG><a name="[1a7]"></a>ShowRegenPeriodServiceFrame</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, regenperiodserviceframe.o(.text.ShowRegenPeriodServiceFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ShowRegenPeriodServiceFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyTasksToFlash
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
</UL>

<P><STRONG><a name="[1a3]"></a>ShowServiceMenuFrame</STRONG> (Thumb, 1374 bytes, Stack size 72 bytes, servicemenuframe.o(.text.ShowServiceMenuFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = ShowServiceMenuFrame &rArr; ShowAlarmNotiServiceFrame &rArr; ShowAlarmListFrame &rArr; TSF_showFrame &rArr; CAL_showFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRegenPeriodServiceFrame
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashingTimeServiceFrame
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmNotiServiceFrame
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillArcRec
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarServiceMenuFrame
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceInfoFrame
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWaterCountBeforeRegenFrame
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLoadTypeFrame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilterSelectionFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainFrame
</UL>

<P><STRONG><a name="[19b]"></a>ShowSofteningFrame</STRONG> (Thumb, 1218 bytes, Stack size 120 bytes, softeningframe.o(.text.ShowSofteningFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ShowSofteningFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyTasksToFlash
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarSofteningFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilterSelectionFrame
</UL>

<P><STRONG><a name="[18e]"></a>ShowWashTimCustFrame</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, washingtimecustomerframe.o(.text.ShowWashTimCustFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ShowWashTimCustFrame &rArr; createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countDaysBetween
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmListFrame
</UL>

<P><STRONG><a name="[1a6]"></a>ShowWashingTimeServiceFrame</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, washingtimeserviceframe.o(.text.ShowWashingTimeServiceFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = ShowWashingTimeServiceFrame &rArr; CSF_showFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyTasksToFlash
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroTime
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSF_showFrame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
</UL>

<P><STRONG><a name="[1ab]"></a>ShowWaterCountBeforeRegenFrame</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, watercountbeforeregen.o(.text.ShowWaterCountBeforeRegenFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ShowWaterCountBeforeRegenFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
</UL>

<P><STRONG><a name="[1d]"></a>SysTick_Handler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Handler &rArr; LL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1b3]"></a>SystemClock_Config</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemClock_Config &rArr; LL_Init1msTick &rArr; LL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetADCClockSource
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB2Prescaler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB1Prescaler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHBPrescaler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_IsReady
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_Enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_ConfigDomain_SYS
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_EnableRTC
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRTCClockSource
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_Enable
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ReleaseBackupDomainReset
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ForceBackupDomainReset
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetRTCClockSource
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableBkUpAccess
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_Enable
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_GetLatency
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[210]"></a>System_init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, system.o(.text.System_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ca]"></a>TC_addButton</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, touchcontroller.o(.text.TC_addButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TC_addButton &rArr; Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[9b]"></a>TC_checkButtons</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, touchcontroller.o(.text.TC_checkButtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TC_checkButtons &rArr; isInRectangle
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isInRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[1e1]"></a>TC_clearButtons</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, touchcontroller.o(.text.TC_clearButtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TC_clearButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[9c]"></a>TC_releaseButtons</STRONG> (Thumb, 142 bytes, Stack size 4 bytes, touchcontroller.o(.text.TC_releaseButtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TC_releaseButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>TIM7_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM7_IRQHandler &rArr; LL_TIM_ClearFlag_UPDATE
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_OVF_Interrupt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_UPDATE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[18d]"></a>TSF_showFrame</STRONG> (Thumb, 680 bytes, Stack size 136 bytes, timesetframe.o(.text.TSF_showFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = TSF_showFrame &rArr; CAL_showFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetFont
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroDateTime
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSec
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSysTime
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_showFrame
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSF_showFrame
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMidClock
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmListFrame
</UL>

<P><STRONG><a name="[1dd]"></a>TS_IO_Delay</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ts_xpt2046.o(.text.TS_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TS_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TsRead16
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TsWrite8
</UL>

<P><STRONG><a name="[1d3]"></a>TS_IO_DetectToch</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ts_xpt2046.o(.text.TS_IO_DetectToch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TS_IO_DetectToch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_ts_DetectTouch
</UL>

<P><STRONG><a name="[1d5]"></a>TS_IO_GetX</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ts_xpt2046.o(.text.TS_IO_GetX))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TS_IO_GetX &rArr; TsRead16 &rArr; TS_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TsRead16
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TsWrite8
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_ts_DetectTouch
</UL>

<P><STRONG><a name="[1d8]"></a>TS_IO_GetY</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ts_xpt2046.o(.text.TS_IO_GetY))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TS_IO_GetY &rArr; TsRead16 &rArr; TS_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TsRead16
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TsWrite8
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_ts_DetectTouch
</UL>

<P><STRONG><a name="[1d4]"></a>TS_IO_Init</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, ts_xpt2046.o(.text.TS_IO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_DetectToch
</UL>

<P><STRONG><a name="[1d9]"></a>Time_init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, time.o(.text.Time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Time_init &rArr; setSysTime &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ALARM_StructInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ALARM_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSysTime
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableIT_ALR
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Get
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d7]"></a>TsRead16</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ts_xpt2046.o(.text.TsRead16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TsRead16 &rArr; TS_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_GetY
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_GetX
</UL>

<P><STRONG><a name="[1d6]"></a>TsWrite8</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ts_xpt2046.o(.text.TsWrite8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TsWrite8 &rArr; TS_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_GetY
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_GetX
</UL>

<P><STRONG><a name="[19]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>WaitForDmaEnd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd_io_spi.o(.text.WaitForDmaEnd))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData24to16
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData8
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8DataFill8
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData16
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData8
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8DataFill16
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadMultiData8
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData16
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData8
</UL>

<P><STRONG><a name="[169]"></a>addDate</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, time.o(.text.addDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = addDate &rArr; addDay &rArr; addMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDay
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMonth
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ProceedStep
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
</UL>

<P><STRONG><a name="[16b]"></a>addDay</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, time.o(.text.addDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = addDay &rArr; addMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMonth
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxDayInMonth
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDate
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addHour
</UL>

<P><STRONG><a name="[1df]"></a>addHour</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, time.o(.text.addHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = addHour &rArr; addDay &rArr; addMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMinute
</UL>

<P><STRONG><a name="[1e0]"></a>addMinute</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, time.o(.text.addMinute))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = addMinute &rArr; addHour &rArr; addDay &rArr; addMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addHour
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSec
</UL>

<P><STRONG><a name="[1de]"></a>addMonth</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, time.o(.text.addMonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = addMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxDayInMonth
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDay
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[8a]"></a>addSec</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, time.o(.text.addSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = addSec &rArr; addMinute &rArr; addHour &rArr; addDay &rArr; addMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMinute
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ProceedStep
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_showFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
</UL>

<P><STRONG><a name="[cd]"></a>assert_failed</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ALARM_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ExitInitMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_BDTR_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_CommonInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToChar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSysTime
</UL>

<P><STRONG><a name="[18a]"></a>calcButParam</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, softeningframe.o(.text.calcButParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = calcButParam &rArr; TC_addButton &rArr; Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarSofteningFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[163]"></a>callKeyboardFromPin</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, pincode.o(.text.callKeyboardFromPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = callKeyboardFromPin &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_showFrame
</UL>

<P><STRONG><a name="[202]"></a>changeTimeLanguage</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, time.o(.text.changeTimeLanguage))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = changeTimeLanguage
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
</UL>

<P><STRONG><a name="[1e2]"></a>compareDate</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, time.o(.text.compareDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = compareDate &rArr; equalDate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[168]"></a>compareDateTime</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, time.o(.text.compareDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = compareDateTime &rArr; equalDateTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countDaysBetween
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroDateTime
</UL>

<P><STRONG><a name="[1e5]"></a>compareTime</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, time.o(.text.compareTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = compareTime &rArr; equalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroTime
</UL>

<P><STRONG><a name="[1e7]"></a>copyOneTaskToFlash</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, planner.o(.text.copyOneTaskToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = copyOneTaskToFlash &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyTasksToFlash
</UL>

<P><STRONG><a name="[16f]"></a>copyTasksToFlash</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, planner.o(.text.copyTasksToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = copyTasksToFlash &rArr; copyOneTaskToFlash &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyOneTaskToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ProceedStep
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRegenPeriodServiceFrame
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashingTimeServiceFrame
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSofteningFrame
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilteringFrame
</UL>

<P><STRONG><a name="[1af]"></a>countDaysBetween</STRONG> (Thumb, 176 bytes, Stack size 144 bytes, time.o(.text.countDaysBetween))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = countDaysBetween &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareDateTime
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalDate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcTimeToStdTime
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashTimCustFrame
</UL>

<P><STRONG><a name="[1cf]"></a>createFrame</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, timesetframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = createFrame &rArr; drawMidClock &rArr; drawTextLabel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetFont
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMidClock
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
</UL>

<P><STRONG><a name="[162]"></a>createPinFrame</STRONG> (Thumb, 394 bytes, Stack size 96 bytes, pincode.o(.text.createPinFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = createPinFrame &rArr; drawFillButton &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetFont
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_showFrame
</UL>

<P><STRONG><a name="[1f7]"></a>decDateTime</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, time.o(.text.decDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = decDateTime &rArr; decSec &rArr; decMinute &rArr; decHour &rArr; decDay &rArr; decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decSec
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decMinute
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decHour
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decDay
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decMonth
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeRemain
</UL>

<P><STRONG><a name="[1fb]"></a>decDay</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, time.o(.text.decDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = decDay &rArr; decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decMonth
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxDayInMonth
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decDateTime
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decHour
</UL>

<P><STRONG><a name="[1fa]"></a>decHour</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, time.o(.text.decHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = decHour &rArr; decDay &rArr; decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decDay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decDateTime
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decMinute
</UL>

<P><STRONG><a name="[1f9]"></a>decMinute</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, time.o(.text.decMinute))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = decMinute &rArr; decHour &rArr; decDay &rArr; decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decHour
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decDateTime
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decSec
</UL>

<P><STRONG><a name="[1fc]"></a>decMonth</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, time.o(.text.decMonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxDayInMonth
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decDateTime
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decDay
</UL>

<P><STRONG><a name="[1f8]"></a>decSec</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, time.o(.text.decSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = decSec &rArr; decMinute &rArr; decHour &rArr; decDay &rArr; decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decMinute
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decDateTime
</UL>

<P><STRONG><a name="[8b]"></a>drawClock</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, gui.o(.text.drawClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetBackColor
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetTextColor
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTime
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainFrame
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashTimCustFrame
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDaysBetweenRegenCustFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_showFrame
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSF_showFrame
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRegenPeriodServiceFrame
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDelayedRegenCustFrame
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowForcedRegenCustFrame
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashingTimeServiceFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmNotiServiceFrame
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_showFrame
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceDateSelectFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceInfoFrame
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLoadTypeFrame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmListFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSofteningFrame
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilterSelectionFrame
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilteringFrame
</UL>

<P><STRONG><a name="[8d]"></a>drawDarkTextLabel</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, widgets.o(.text.drawDarkTextLabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = drawDarkTextLabel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_showFrame
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMidClock
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRegenPeriodServiceFrame
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashingTimeServiceFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWaterCountBeforeRegenFrame
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLoadTypeFrame
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSofteningFrame
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilterSelectionFrame
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilteringFrame
</UL>

<P><STRONG><a name="[171]"></a>drawFillArcRec</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, widgets.o(.text.drawFillArcRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drawFillArcRec &rArr; BSP_LCD_FillCircle &rArr; BSP_LCD_DrawCircle &rArr; BSP_LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetBackColor
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetTextColor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarMenuFrame
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResultFromKeyboard
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarServiceMenuFrame
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarSofteningFrame
</UL>

<P><STRONG><a name="[197]"></a>drawFillButton</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, widgets.o(.text.drawFillButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = drawFillButton &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainFrame
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDelayedRegenCustFrame
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowForcedRegenCustFrame
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceDateSelectFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceInfoFrame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilterSelectionFrame
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markLines
</UL>

<P><STRONG><a name="[1ea]"></a>drawMainBar</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, widgets.o(.text.drawMainBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = drawMainBar &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1eb]"></a>drawMainWindow</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, widgets.o(.text.drawMainWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drawMainWindow &rArr; BSP_LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1d0]"></a>drawMidClock</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, timesetframe.o(.text.drawMidClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = drawMidClock &rArr; drawTextLabel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetFont
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
</UL>

<P><STRONG><a name="[185]"></a>drawScrollButton</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, widgets.o(.text.drawScrollButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = drawScrollButton &rArr; BSP_LCD_FillCircle &rArr; BSP_LCD_DrawCircle &rArr; BSP_LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarMenuFrame
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarServiceMenuFrame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarSofteningFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[186]"></a>drawStaticLines</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, widgets.o(.text.drawStaticLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = drawStaticLines &rArr; BSP_LCD_DrawLine &rArr; BSP_LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarMenuFrame
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarServiceMenuFrame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarSofteningFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1ec]"></a>drawStatusBarEmpty</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, widgets.o(.text.drawStatusBarEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drawStatusBarEmpty &rArr; BSP_LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1ee]"></a>drawStatusBarLabel</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, widgets.o(.text.drawStatusBarLabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = drawStatusBarLabel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1ed]"></a>drawStatusBarOkCancel</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, widgets.o(.text.drawStatusBarOkCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[93]"></a>drawTextLabel</STRONG> (Thumb, 568 bytes, Stack size 32 bytes, widgets.o(.text.drawTextLabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = drawTextLabel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawYear
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMonth
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDay
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSF_showFrame
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMidClock
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarSofteningFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1e3]"></a>equalDate</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, time.o(.text.equalDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = equalDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countDaysBetween
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareDate
</UL>

<P><STRONG><a name="[1e4]"></a>equalDateTime</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, time.o(.text.equalDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = equalDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareDateTime
</UL>

<P><STRONG><a name="[1e6]"></a>equalTime</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, time.o(.text.equalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = equalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareTime
</UL>

<P><STRONG><a name="[9e]"></a>filter</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, filter.o(.text.filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = filter &rArr; isFiltered
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isFiltered
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Sense_Interrupt
</UL>

<P><STRONG><a name="[77]"></a>getCharIndex</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, stm32_adafruit_lcd.o(.text.getCharIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getCharIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStringWidth
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayChar
</UL>

<P><STRONG><a name="[200]"></a>getDayNameByDate</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, time.o(.text.getDayNameByDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getDayNameByDate &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processChar
</UL>

<P><STRONG><a name="[1fe]"></a>getFormatedTime</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, time.o(.text.getFormatedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = getFormatedTime &rArr; getFormatedTimeFromSource &rArr; processChar &rArr; getDayNameByDate &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
</UL>

<P><STRONG><a name="[8c]"></a>getFormatedTimeFromSource</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, time.o(.text.getFormatedTimeFromSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = getFormatedTimeFromSource &rArr; processChar &rArr; getDayNameByDate &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processChar
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeTimeLanguage
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTime
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawYear
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMonth
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashTimCustFrame
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_showFrame
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSF_showFrame
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMidClock
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[7a]"></a>getStringWidth</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32_adafruit_lcd.o(.text.getStringWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = getStringWidth &rArr; getCharIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCharIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>

<P><STRONG><a name="[167]"></a>getTime</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, time.o(.text.getTime))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeRemain
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ProceedStep
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashTimCustFrame
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMidClock
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCursor
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceInfoFrame
</UL>

<P><STRONG><a name="[3]"></a>ili9488_DisplayOff</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ili9488.o(.text.ili9488_DisplayOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ili9488_DisplayOff &rArr; LCD_IO_WriteCmd8 &rArr; LcdCmdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Bl_OnOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[2]"></a>ili9488_DisplayOn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ili9488.o(.text.ili9488_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ili9488_DisplayOn &rArr; LCD_IO_WriteCmd8 &rArr; LcdCmdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Bl_OnOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[c]"></a>ili9488_DrawBitmap</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, ili9488.o(.text.ili9488_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ili9488_DrawBitmap &rArr; LCD_IO_WriteCmd8MultipleData8 &rArr; LCD_IO_WriteMultiData8 &rArr; LCD_IO_WriteMultiData &rArr; LL_SPI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[8]"></a>ili9488_DrawHLine</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ili9488.o(.text.ili9488_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ili9488_DrawHLine &rArr; ili9488_FillRect &rArr; ili9488_SetDisplayWindow &rArr; LCD_IO_WriteData8 &rArr; LcdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[d]"></a>ili9488_DrawRGBImage</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ili9488.o(.text.ili9488_DrawRGBImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ili9488_DrawRGBImage &rArr; ili9488_SetDisplayWindow &rArr; LCD_IO_WriteData8 &rArr; LcdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_SetDisplayWindow
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_write16to24
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[9]"></a>ili9488_DrawVLine</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ili9488.o(.text.ili9488_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ili9488_DrawVLine &rArr; ili9488_FillRect &rArr; ili9488_SetDisplayWindow &rArr; LCD_IO_WriteData8 &rArr; LcdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[e]"></a>ili9488_FillRect</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, ili9488.o(.text.ili9488_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ili9488_FillRect &rArr; ili9488_SetDisplayWindow &rArr; LCD_IO_WriteData8 &rArr; LcdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_SetDisplayWindow
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_isBusy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8DataFill8
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_DrawVLine
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[b]"></a>ili9488_GetLcdPixelHeight</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9488.o(.text.ili9488_GetLcdPixelHeight))
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[a]"></a>ili9488_GetLcdPixelWidth</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9488.o(.text.ili9488_GetLcdPixelWidth))
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[0]"></a>ili9488_Init</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, ili9488.o(.text.ili9488_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ili9488_Init &rArr; LCD_IO_WriteCmd8MultipleData8 &rArr; LCD_IO_WriteMultiData8 &rArr; LCD_IO_WriteMultiData &rArr; LL_SPI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_ReadID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[1]"></a>ili9488_ReadID</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ili9488.o(.text.ili9488_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ili9488_ReadID &rArr; ili9488_Init &rArr; LCD_IO_WriteCmd8MultipleData8 &rArr; LCD_IO_WriteMultiData8 &rArr; LCD_IO_WriteMultiData &rArr; LL_SPI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[6]"></a>ili9488_ReadPixel</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ili9488.o(.text.ili9488_ReadPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ili9488_ReadPixel &rArr; LCD_IO_ReadCmd8MultipleData24to16 &rArr; LCD_IO_ReadMultiData16to24 &rArr; LcdDirWrite &rArr; LCD_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData24to16
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[f]"></a>ili9488_ReadRGBImage</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ili9488.o(.text.ili9488_ReadRGBImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ili9488_ReadRGBImage &rArr; LCD_IO_ReadCmd8MultipleData24to16 &rArr; LCD_IO_ReadMultiData16to24 &rArr; LcdDirWrite &rArr; LCD_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_SetDisplayWindow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData24to16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[10]"></a>ili9488_Scroll</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, ili9488.o(.text.ili9488_Scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ili9488_Scroll &rArr; LCD_IO_WriteCmd8MultipleData16 &rArr; LCD_IO_WriteMultiData16 &rArr; LCD_IO_WriteMultiData &rArr; LL_SPI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData16
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8DataFill16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[4]"></a>ili9488_SetCursor</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ili9488.o(.text.ili9488_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ili9488_SetCursor &rArr; LCD_IO_WriteData8 &rArr; LcdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[7]"></a>ili9488_SetDisplayWindow</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ili9488.o(.text.ili9488_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ili9488_SetDisplayWindow &rArr; LCD_IO_WriteData8 &rArr; LcdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_ReadRGBImage
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_DrawRGBImage
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[5]"></a>ili9488_WritePixel</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ili9488.o(.text.ili9488_WritePixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ili9488_WritePixel &rArr; ili9488_write16to24 &rArr; LCD_IO_WriteData8 &rArr; LcdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_write16to24
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_drv)
</UL>
<P><STRONG><a name="[12]"></a>ili9488_ts_DetectTouch</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, ili9488.o(.text.ili9488_ts_DetectTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ili9488_ts_DetectTouch &rArr; TS_IO_GetY &rArr; TsRead16 &rArr; TS_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_DetectToch
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_GetY
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_GetX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_ts_drv)
</UL>
<P><STRONG><a name="[13]"></a>ili9488_ts_GetXY</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ili9488.o(.text.ili9488_ts_GetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ili9488_ts_GetXY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_ts_drv)
</UL>
<P><STRONG><a name="[11]"></a>ili9488_ts_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ili9488.o(.text.ili9488_ts_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ili9488_ts_Init &rArr; LCD_IO_Init &rArr; LCD_Delay &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9488.o(.data.ili9488_ts_drv)
</UL>
<P><STRONG><a name="[205]"></a>ili9488_write16to24</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ili9488.o(.text.ili9488_write16to24))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ili9488_write16to24 &rArr; LCD_IO_WriteData8 &rArr; LcdWrite8 &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData8
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_DrawRGBImage
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9488_WritePixel
</UL>

<P><STRONG><a name="[207]"></a>initGUI</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, gui.o(.text.initGUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = initGUI &rArr; BSP_LCD_Init &rArr; BSP_LCD_Clear &rArr; BSP_LCD_GetYSize
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[208]"></a>intToChar</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, util.o(.text.intToChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = intToChar &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processChar
</UL>

<P><STRONG><a name="[172]"></a>intToStr</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, util.o(.text.intToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = intToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDaysBetweenRegenCustFrame
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResultFromKeyboard
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinToStr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarSofteningFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSofteningFrame
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilteringFrame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1ff]"></a>isFiltered</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, filter.o(.text.isFiltered))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = isFiltered
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>

<P><STRONG><a name="[1cc]"></a>isInRectangle</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, gui.o(.text.isInRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isInRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_checkButtons
</UL>

<P><STRONG><a name="[201]"></a>isLeapYear</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, time.o(.text.isLeapYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayNameByDate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxDayInMonth
</UL>

<P><STRONG><a name="[166]"></a>isZeroDateTime</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, time.o(.text.isZeroDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = isZeroDateTime &rArr; compareDateTime &rArr; equalDateTime
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
</UL>

<P><STRONG><a name="[1b1]"></a>isZeroTime</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, time.o(.text.isZeroTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = isZeroTime &rArr; compareTime &rArr; equalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashingTimeServiceFrame
</UL>

<P><STRONG><a name="[ac]"></a>loadParams</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, flashparam.o(.text.loadParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = loadParams
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_GetParam
</UL>

<P><STRONG><a name="[aa]"></a>lockFlash</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flashparam.o(.text.lockFlash))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_DeleteParam
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = main &rArr; ShowMainFrame &rArr; ShowServiceMenuFrame &rArr; ShowAlarmNotiServiceFrame &rArr; ShowAlarmListFrame &rArr; TSF_showFrame &rArr; CAL_showFrame &rArr; ShowKeyboardFrame &rArr; createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainFrame
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGUI
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_GetParam
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_EnableIT
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableIT_SEC
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_AF_Remap_SWJ_NOJTAG
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8f]"></a>maxDayInMonth</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, time.o(.text.maxDayInMonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Interrupt
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decDay
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addDay
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decMonth
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMonth
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSysTime
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_showFrame
</UL>

<P><STRONG><a name="[1f6]"></a>pinToStr</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, pincode.o(.text.pinToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pinToStr &rArr; intToStr
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPinFrame
</UL>

<P><STRONG><a name="[203]"></a>processChar</STRONG> (Thumb, 1250 bytes, Stack size 88 bytes, time.o(.text.processChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = processChar &rArr; getDayNameByDate &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayNameByDate
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToChar
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
</UL>

<P><STRONG><a name="[16c]"></a>setAlarm</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, alarm.o(.text.setAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = setAlarm &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ExitInitMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableIT_ALR
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ClearFlag_ALR
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ALARM_Set
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsActiveFlag_RTOF
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcTimeToStdTime
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ProceedStep
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
</UL>

<P><STRONG><a name="[1d1]"></a>setDate</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, time.o(.text.setDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setDate
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
</UL>

<P><STRONG><a name="[1d2]"></a>setSysTime</STRONG> (Thumb, 312 bytes, Stack size 112 bytes, time.o(.text.setSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = setSysTime &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ExitInitMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcTimeToStdTime
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxDayInMonth
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Set
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSF_showFrame
</UL>

<P><STRONG><a name="[16a]"></a>setTime</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, time.o(.text.setTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ProceedStep
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashingTimeServiceFrame
</UL>

<P><STRONG><a name="[1aa]"></a>showLoadTypeFrame</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, loadtypeframe.o(.text.showLoadTypeFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = showLoadTypeFrame &rArr; createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDarkTextLabel
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
</UL>

<P><STRONG><a name="[219]"></a>showServiceDateSelectFrame</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, servicedateselect.o(.text.showServiceDateSelectFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = showServiceDateSelectFrame &rArr; createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceInfoFrame
</UL>

<P><STRONG><a name="[1ac]"></a>showServiceInfoFrame</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, serviceinfo.o(.text.showServiceInfoFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = showServiceInfoFrame &rArr; showServiceDateSelectFrame &rArr; createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcTimeToInt
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceDateSelectFrame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
</UL>

<P><STRONG><a name="[16e]"></a>stopAlarm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, alarm.o(.text.stopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stopAlarm &rArr; LL_RTC_DisableIT_ALR
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableIT_ALR
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_Planner
</UL>

<P><STRONG><a name="[218]"></a>timeRemain</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, planner.o(.text.timeRemain))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = timeRemain &rArr; decDateTime &rArr; decSec &rArr; decMinute &rArr; decHour &rArr; decDay &rArr; decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decDateTime
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
</UL>

<P><STRONG><a name="[a9]"></a>unlockFlash</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, flashparam.o(.text.unlockFlash))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SaveParam
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_DeleteParam
</UL>

<P><STRONG><a name="[21a]"></a>wtcTimeToInt</STRONG> (Thumb, 26 bytes, Stack size 64 bytes, time.o(.text.wtcTimeToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wtcTimeToInt &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcTimeToStdTime
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceInfoFrame
</UL>

<P><STRONG><a name="[1e9]"></a>wtcTimeToStdTime</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, time.o(.text.wtcTimeToStdTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wtcTimeToStdTime
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAlarm
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countDaysBetween
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcTimeToInt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSysTime
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_getFlowSpeed
</UL>

<P><STRONG><a name="[21c]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_incFlowMeter
</UL>

<P><STRONG><a name="[21f]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_incFlowMeter
</UL>

<P><STRONG><a name="[222]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_incFlowMeter
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_getFlowSpeed
</UL>

<P><STRONG><a name="[25d]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_incFlowMeter
</UL>

<P><STRONG><a name="[223]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[21e]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[221]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[25e]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[224]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_incFlowMeter
</UL>

<P><STRONG><a name="[226]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[227]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
</UL>

<P><STRONG><a name="[21d]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[209]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20a]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20b]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, main.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20c]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20d]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, main.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20f]"></a>LL_GPIO_AF_Remap_SWJ_NOJTAG</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_GPIO_AF_Remap_SWJ_NOJTAG))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[211]"></a>LL_RTC_EnableIT_SEC</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.LL_RTC_EnableIT_SEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_EnableIT_SEC
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[212]"></a>LL_SYSTICK_EnableIT</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_SYSTICK_EnableIT))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b4]"></a>LL_FLASH_SetLatency</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_FLASH_SetLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b5]"></a>LL_FLASH_GetLatency</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_FLASH_GetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b6]"></a>LL_RCC_HSE_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b7]"></a>LL_RCC_HSE_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b8]"></a>LL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b9]"></a>LL_RCC_GetRTCClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_GetRTCClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1ba]"></a>LL_RCC_ForceBackupDomainReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_ForceBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1bb]"></a>LL_RCC_ReleaseBackupDomainReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_ReleaseBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1bc]"></a>LL_RCC_LSE_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_LSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1bd]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1be]"></a>LL_RCC_SetRTCClockSource</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetRTCClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetRTCClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1bf]"></a>LL_RCC_EnableRTC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_EnableRTC))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c0]"></a>LL_RCC_PLL_ConfigDomain_SYS</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text.LL_RCC_PLL_ConfigDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_PLL_ConfigDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c1]"></a>LL_RCC_PLL_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_PLL_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c2]"></a>LL_RCC_PLL_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_PLL_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c3]"></a>LL_RCC_SetAHBPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetAHBPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c4]"></a>LL_RCC_SetAPB1Prescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetAPB1Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c5]"></a>LL_RCC_SetAPB2Prescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetAPB2Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetAPB2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c6]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c7]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c9]"></a>LL_RCC_SetADCClockSource</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetADCClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetADCClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[127]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[128]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[129]"></a>LL_GPIO_AF_SetEXTISource</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio.o(.text.LL_GPIO_AF_SetEXTISource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_AF_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[12a]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gpio.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[12b]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[12c]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gpio.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[12d]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gpio.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[12e]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, gpio.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[11c]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[11d]"></a>LL_ADC_REG_SetSequencerRanks</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, adc.o(.text.LL_ADC_REG_SetSequencerRanks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[11e]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, adc.o(.text.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[121]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(.text.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[122]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[123]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, dma.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[124]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dma.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[125]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, dma.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[130]"></a>LL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc.o(.text.LL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[131]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[132]"></a>LL_RCC_EnableRTC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc.o(.text.LL_RCC_EnableRTC))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[133]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[134]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, rtc.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[135]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rtc.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[136]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, rtc.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[137]"></a>LL_RTC_SetAsynchPrescaler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtc.o(.text.LL_RTC_SetAsynchPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_SetAsynchPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[139]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[13a]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[13b]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, spi.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[13c]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[13d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, spi.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[13f]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[140]"></a>LL_DMA_SetDataTransferDirection</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, spi.o(.text.LL_DMA_SetDataTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetDataTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[141]"></a>LL_DMA_SetChannelPriorityLevel</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, spi.o(.text.LL_DMA_SetChannelPriorityLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[142]"></a>LL_DMA_SetMode</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, spi.o(.text.LL_DMA_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[143]"></a>LL_DMA_SetPeriphIncMode</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, spi.o(.text.LL_DMA_SetPeriphIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetPeriphIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[144]"></a>LL_DMA_SetMemoryIncMode</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, spi.o(.text.LL_DMA_SetMemoryIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetMemoryIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[145]"></a>LL_DMA_SetPeriphSize</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, spi.o(.text.LL_DMA_SetPeriphSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetPeriphSize
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[146]"></a>LL_DMA_SetMemorySize</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, spi.o(.text.LL_DMA_SetMemorySize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetMemorySize
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[149]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tim.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[14a]"></a>LL_TIM_DisableARRPreload</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, tim.o(.text.LL_TIM_DisableARRPreload))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_DisableARRPreload
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[14b]"></a>LL_TIM_OC_EnablePreload</STRONG> (Thumb, 178 bytes, Stack size 36 bytes, tim.o(.text.LL_TIM_OC_EnablePreload))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_TIM_OC_EnablePreload
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[14c]"></a>LL_TIM_OC_DisableFast</STRONG> (Thumb, 178 bytes, Stack size 36 bytes, tim.o(.text.LL_TIM_OC_DisableFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_TIM_OC_DisableFast
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[14d]"></a>LL_TIM_SetTriggerOutput</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tim.o(.text.LL_TIM_SetTriggerOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetTriggerOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[14e]"></a>LL_TIM_DisableMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, tim.o(.text.LL_TIM_DisableMasterSlaveMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_DisableMasterSlaveMode
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[14f]"></a>LL_TIM_EnableAllOutputs</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, tim.o(.text.LL_TIM_EnableAllOutputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_EnableAllOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[150]"></a>LL_TIM_OC_SetCompareCH1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tim.o(.text.LL_TIM_OC_SetCompareCH1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH1
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[151]"></a>LL_TIM_CC_EnableChannel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tim.o(.text.LL_TIM_CC_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_CC_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[152]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, tim.o(.text.LL_TIM_EnableCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_EnableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[153]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tim.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[154]"></a>LL_GPIO_AF_EnableRemap_TIM3</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tim.o(.text.LL_GPIO_AF_EnableRemap_TIM3))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[158]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usart.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[159]"></a>LL_USART_ConfigAsyncMode</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, usart.o(.text.LL_USART_ConfigAsyncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ConfigAsyncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[15a]"></a>LL_USART_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, usart.o(.text.LL_USART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[ae]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[af]"></a>LL_GPIO_TogglePin</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f1xx_it.o(.text.LL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[17c]"></a>LL_RTC_ClearFlag_SEC</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f1xx_it.o(.text.LL_RTC_ClearFlag_SEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_ClearFlag_SEC
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>LL_RTC_IsActiveFlag_ALR</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32f1xx_it.o(.text.LL_RTC_IsActiveFlag_ALR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_IsActiveFlag_ALR
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>LL_RTC_ClearFlag_ALR</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f1xx_it.o(.text.LL_RTC_ClearFlag_ALR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_ClearFlag_ALR
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>LL_EXTI_IsActiveFlag_0_31</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, stm32f1xx_it.o(.text.LL_EXTI_IsActiveFlag_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_IsActiveFlag_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>LL_EXTI_ClearFlag_0_31</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f1xx_it.o(.text.LL_EXTI_ClearFlag_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_ClearFlag_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[1ce]"></a>LL_TIM_ClearFlag_UPDATE</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32f1xx_it.o(.text.LL_TIM_ClearFlag_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_ClearFlag_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f1xx_ll_gpio.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[dd]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_ll_gpio.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[de]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_ll_gpio.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[df]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_ll_gpio.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[ce]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_CommonInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
</UL>

<P><STRONG><a name="[d1]"></a>LL_ADC_REG_SetSequencerLength</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_ll_adc.o(.text.LL_ADC_REG_SetSequencerLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_REG_SetSequencerLength
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
</UL>

<P><STRONG><a name="[176]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[173]"></a>LL_RCC_GetAHBPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_GetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>

<P><STRONG><a name="[174]"></a>LL_RCC_GetAPB1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_GetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
</UL>

<P><STRONG><a name="[175]"></a>LL_RCC_GetAPB2Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_GetAPB2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
</UL>

<P><STRONG><a name="[178]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[179]"></a>LL_RCC_PLL_GetPrediv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_PLL_GetPrediv))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[17a]"></a>LL_RCC_PLL_GetMultiplicator</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_PLL_GetMultiplicator))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[e1]"></a>LL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_ll_utils.o(.text.LL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
</UL>

<P><STRONG><a name="[d3]"></a>LL_EXTI_DisableEvent_0_31</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f1xx_ll_exti.o(.text.LL_EXTI_DisableEvent_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_DisableEvent_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[d4]"></a>LL_EXTI_EnableIT_0_31</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f1xx_ll_exti.o(.text.LL_EXTI_EnableIT_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_EnableIT_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[d5]"></a>LL_EXTI_DisableIT_0_31</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f1xx_ll_exti.o(.text.LL_EXTI_DisableIT_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_DisableIT_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[d6]"></a>LL_EXTI_EnableEvent_0_31</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f1xx_ll_exti.o(.text.LL_EXTI_EnableEvent_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_EnableEvent_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[d7]"></a>LL_EXTI_DisableFallingTrig_0_31</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f1xx_ll_exti.o(.text.LL_EXTI_DisableFallingTrig_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_DisableFallingTrig_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[d8]"></a>LL_EXTI_EnableRisingTrig_0_31</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f1xx_ll_exti.o(.text.LL_EXTI_EnableRisingTrig_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_EnableRisingTrig_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[d9]"></a>LL_EXTI_DisableRisingTrig_0_31</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f1xx_ll_exti.o(.text.LL_EXTI_DisableRisingTrig_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_DisableRisingTrig_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[da]"></a>LL_EXTI_EnableFallingTrig_0_31</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f1xx_ll_exti.o(.text.LL_EXTI_EnableFallingTrig_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_EnableFallingTrig_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[ed]"></a>LL_RTC_DisableWriteProtection</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_DisableWriteProtection))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_DisableWriteProtection
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
</UL>

<P><STRONG><a name="[f9]"></a>LL_RTC_ClearFlag_RS</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_ClearFlag_RS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_ClearFlag_RS
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[ee]"></a>LL_RTC_EnableWriteProtection</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_EnableWriteProtection))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_EnableWriteProtection
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ExitInitMode
</UL>

<P><STRONG><a name="[eb]"></a>LL_RTC_IsActiveFlag_RTOF</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_IsActiveFlag_RTOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_IsActiveFlag_RTOF
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ExitInitMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
</UL>

<P><STRONG><a name="[ec]"></a>LL_SYSTICK_IsActiveCounterFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_ll_rtc.o(.text.LL_SYSTICK_IsActiveCounterFlag))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ExitInitMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
</UL>

<P><STRONG><a name="[fa]"></a>LL_RTC_IsActiveFlag_RS</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_IsActiveFlag_RS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_IsActiveFlag_RS
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[f1]"></a>LL_RTC_ClearFlag_ALR</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_ClearFlag_ALR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_ClearFlag_ALR
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[f2]"></a>LL_RTC_ClearFlag_OW</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_ClearFlag_OW))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_ClearFlag_OW
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[f3]"></a>LL_RTC_ClearFlag_SEC</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_ClearFlag_SEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_ClearFlag_SEC
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[f4]"></a>LL_RTC_TAMPER_Disable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_TAMPER_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_TAMPER_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[f5]"></a>LL_RTC_SetOutputSource</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_SetOutputSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_SetOutputSource
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[f6]"></a>LL_RTC_SetAsynchPrescaler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_SetAsynchPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_SetAsynchPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[f8]"></a>LL_RTC_TIME_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_TIME_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_TIME_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
</UL>

<P><STRONG><a name="[e9]"></a>LL_RTC_ALARM_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_ll_rtc.o(.text.LL_RTC_ALARM_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_ALARM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ALARM_Init
</UL>

<P><STRONG><a name="[fc]"></a>LL_SPI_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32f1xx_ll_spi.o(.text.LL_SPI_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[fd]"></a>LL_SPI_SetCRCPolynomial</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_ll_spi.o(.text.LL_SPI_SetCRCPolynomial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_SetCRCPolynomial
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[100]"></a>LL_TIM_SetAutoReload</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_SetAutoReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[101]"></a>LL_TIM_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[102]"></a>LL_TIM_SetRepetitionCounter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_SetRepetitionCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetRepetitionCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[103]"></a>LL_TIM_GenerateEvent_UPDATE</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_GenerateEvent_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[105]"></a>OC1Config</STRONG> (Thumb, 752 bytes, Stack size 32 bytes, stm32f1xx_ll_tim.o(.text.OC1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC1Config &rArr; LL_TIM_OC_SetCompareCH1
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH1
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[106]"></a>OC2Config</STRONG> (Thumb, 696 bytes, Stack size 32 bytes, stm32f1xx_ll_tim.o(.text.OC2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC2Config &rArr; LL_TIM_OC_SetCompareCH2
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[107]"></a>OC3Config</STRONG> (Thumb, 662 bytes, Stack size 32 bytes, stm32f1xx_ll_tim.o(.text.OC3Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC3Config &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH3
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[108]"></a>OC4Config</STRONG> (Thumb, 616 bytes, Stack size 32 bytes, stm32f1xx_ll_tim.o(.text.OC4Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC4Config &rArr; LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[15b]"></a>LL_TIM_OC_SetCompareCH1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH1
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>

<P><STRONG><a name="[15c]"></a>LL_TIM_OC_SetCompareCH2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH2
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
</UL>

<P><STRONG><a name="[15d]"></a>LL_TIM_OC_SetCompareCH3</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
</UL>

<P><STRONG><a name="[15e]"></a>LL_TIM_OC_SetCompareCH4</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
</UL>

<P><STRONG><a name="[10a]"></a>LL_USART_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32f1xx_ll_usart.o(.text.LL_USART_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[10b]"></a>LL_USART_SetStopBitsLength</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_ll_usart.o(.text.LL_USART_SetStopBitsLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_SetStopBitsLength
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[10c]"></a>LL_USART_SetHWFlowCtrl</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_ll_usart.o(.text.LL_USART_SetHWFlowCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_SetHWFlowCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[10d]"></a>LL_USART_SetBaudRate</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f1xx_ll_usart.o(.text.LL_USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_USART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[115]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motor.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Reverse
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Forward
</UL>

<P><STRONG><a name="[111]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motor.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Brake
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Forward
</UL>

<P><STRONG><a name="[113]"></a>LL_TIM_OC_SetCompareCH2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motor.o(.text.LL_TIM_OC_SetCompareCH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH2
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Reverse
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Brake
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Forward
</UL>

<P><STRONG><a name="[112]"></a>LL_TIM_OC_SetCompareCH3</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motor.o(.text.LL_TIM_OC_SetCompareCH3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Reverse
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Brake
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_Forward
</UL>

<P><STRONG><a name="[1da]"></a>LL_RTC_TIME_Get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, time.o(.text.LL_RTC_TIME_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_TIME_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[1dc]"></a>LL_RTC_EnableIT_ALR</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, time.o(.text.LL_RTC_EnableIT_ALR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_EnableIT_ALR
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[217]"></a>LL_RTC_TIME_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, time.o(.text.LL_RTC_TIME_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_TIME_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSysTime
</UL>

<P><STRONG><a name="[213]"></a>LL_RTC_IsActiveFlag_RTOF</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, alarm.o(.text.LL_RTC_IsActiveFlag_RTOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_IsActiveFlag_RTOF
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAlarm
</UL>

<P><STRONG><a name="[214]"></a>LL_RTC_ALARM_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, alarm.o(.text.LL_RTC_ALARM_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_ALARM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAlarm
</UL>

<P><STRONG><a name="[215]"></a>LL_RTC_ClearFlag_ALR</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, alarm.o(.text.LL_RTC_ClearFlag_ALR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_ClearFlag_ALR
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAlarm
</UL>

<P><STRONG><a name="[216]"></a>LL_RTC_EnableIT_ALR</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, alarm.o(.text.LL_RTC_EnableIT_ALR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_EnableIT_ALR
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAlarm
</UL>

<P><STRONG><a name="[21b]"></a>LL_RTC_DisableIT_ALR</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, alarm.o(.text.LL_RTC_DisableIT_ALR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_DisableIT_ALR
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
</UL>

<P><STRONG><a name="[9d]"></a>LL_TIM_GetCounter</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, flowmeter.o(.text.LL_TIM_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Sense_Interrupt
</UL>

<P><STRONG><a name="[9f]"></a>LL_TIM_SetCounter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flowmeter.o(.text.LL_TIM_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Sense_Interrupt
</UL>

<P><STRONG><a name="[10e]"></a>LL_SPI_TransmitData8</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, lcd_io_spi.o(.text.LL_SPI_TransmitData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_SPI_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCmdWrite8
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite8
</UL>

<P><STRONG><a name="[10f]"></a>LL_SPI_IsActiveFlag_BSY</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lcd_io_spi.o(.text.LL_SPI_IsActiveFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_IsActiveFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCmdWrite8
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite8
</UL>

<P><STRONG><a name="[b2]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_io_spi.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData24to16
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData8
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8DataFill8
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData16
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData8
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8DataFill16
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCmdWrite8
</UL>

<P><STRONG><a name="[95]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_io_spi.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadMultiData16to24
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadMultiData8
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCmdWrite8
</UL>

<P><STRONG><a name="[c9]"></a>LL_SPI_Disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lcd_io_spi.o(.text.LL_SPI_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData
</UL>

<P><STRONG><a name="[ca]"></a>LL_SPI_EnableDMAReq_TX</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lcd_io_spi.o(.text.LL_SPI_EnableDMAReq_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_EnableDMAReq_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData
</UL>

<P><STRONG><a name="[cb]"></a>LL_SPI_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lcd_io_spi.o(.text.LL_SPI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultiData
</UL>

<P><STRONG><a name="[b3]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lcd_io_spi.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>

<P><STRONG><a name="[b4]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, lcd_io_spi.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>

<P><STRONG><a name="[b7]"></a>LL_SPI_SetDataWidth</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_io_spi.o(.text.LL_SPI_SetDataWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_SetDataWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData24to16
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadCmd8MultipleData8
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8DataFill8
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData16
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8MultipleData8
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8DataFill16
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteCmd8
</UL>

<P><STRONG><a name="[78]"></a>DrawChar</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, stm32_adafruit_lcd.o(.text.DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayChar
</UL>

<P><STRONG><a name="[7c]"></a>SetDisplayWindow</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32_adafruit_lcd.o(.text.SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
</UL>

<P><STRONG><a name="[1a2]"></a>createFrame</STRONG> (Thumb, 276 bytes, Stack size 112 bytes, mainframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainFrame
</UL>

<P><STRONG><a name="[1a0]"></a>createFrame</STRONG> (Thumb, 1052 bytes, Stack size 152 bytes, keyboardframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetFont
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowKeyboardFrame
</UL>

<P><STRONG><a name="[1a5]"></a>createFrame</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, menuframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScrollButton
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStaticLines
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuFrame
</UL>

<P><STRONG><a name="[184]"></a>calcButParam</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, menuframe.o(.text.calcButParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = calcButParam &rArr; TC_addButton &rArr; Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarMenuFrame
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[194]"></a>createFrame</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, daysbetweenregencustomerframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDaysBetweenRegenCustFrame
</UL>

<P><STRONG><a name="[195]"></a>createFrame</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, delayedregencustomerframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = createFrame &rArr; showRemeiningTime &rArr; timeRemain &rArr; decDateTime &rArr; decSec &rArr; decMinute &rArr; decHour &rArr; decDay &rArr; decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarLabel
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDelayedRegenCustFrame
</UL>

<P><STRONG><a name="[196]"></a>showRemeiningTime</STRONG> (Thumb, 560 bytes, Stack size 64 bytes, delayedregencustomerframe.o(.text.showRemeiningTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = showRemeiningTime &rArr; timeRemain &rArr; decDateTime &rArr; decSec &rArr; decMinute &rArr; decHour &rArr; decDay &rArr; decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeRemain
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDelayedRegenCustFrame
</UL>

<P><STRONG><a name="[19e]"></a>createFrame</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, forcedregencustomerframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = createFrame &rArr; showRemeiningTime &rArr; timeRemain &rArr; decDateTime &rArr; decSec &rArr; decMinute &rArr; decHour &rArr; decDay &rArr; decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRemeiningTime
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarLabel
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowForcedRegenCustFrame
</UL>

<P><STRONG><a name="[19f]"></a>showRemeiningTime</STRONG> (Thumb, 560 bytes, Stack size 64 bytes, forcedregencustomerframe.o(.text.showRemeiningTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = showRemeiningTime &rArr; timeRemain &rArr; decDateTime &rArr; decSec &rArr; decMinute &rArr; decHour &rArr; decDay &rArr; decMonth &rArr; maxDayInMonth &rArr; isLeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeRemain
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowForcedRegenCustFrame
</UL>

<P><STRONG><a name="[1ae]"></a>createFrame</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, washingtimecustomerframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashTimCustFrame
</UL>

<P><STRONG><a name="[89]"></a>createFrame</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, calendar.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = createFrame &rArr; drawYear &rArr; drawTextLabel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawYear
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMonth
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDay
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_showFrame
</UL>

<P><STRONG><a name="[1ef]"></a>drawDay</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, calendar.o(.text.drawDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = drawDay &rArr; drawTextLabel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1f0]"></a>drawMonth</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, calendar.o(.text.drawMonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = drawMonth &rArr; drawTextLabel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1f1]"></a>drawYear</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, calendar.o(.text.drawYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = drawYear &rArr; drawTextLabel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[91]"></a>createFrame</STRONG> (Thumb, 462 bytes, Stack size 128 bytes, clockset.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetFont
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSF_showFrame
</UL>

<P><STRONG><a name="[19d]"></a>createFrame</STRONG> (Thumb, 460 bytes, Stack size 120 bytes, filteringframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = createFrame &rArr; drawStatusBarOkCancel &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilteringFrame
</UL>

<P><STRONG><a name="[199]"></a>createFrame</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, filterselectionframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = createFrame &rArr; markLines &rArr; drawFillButton &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markLines
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilterSelectionFrame
</UL>

<P><STRONG><a name="[19c]"></a>markLines</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, filterselectionframe.o(.text.markLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = markLines &rArr; drawFillButton &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFilterSelectionFrame
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1ad]"></a>createFrame</STRONG> (Thumb, 660 bytes, Stack size 152 bytes, softeningframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScrollButton
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStaticLines
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSofteningFrame
</UL>

<P><STRONG><a name="[193]"></a>createFrame</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, alarmnotiframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = createFrame &rArr; drawMainBar &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmNotiServiceFrame
</UL>

<P><STRONG><a name="[18c]"></a>createFrame</STRONG> (Thumb, 678 bytes, Stack size 72 bytes, alarmlistframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = createFrame &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarmListFrame
</UL>

<P><STRONG><a name="[1a9]"></a>createFrame</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, servicemenuframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScrollButton
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStaticLines
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcButParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowServiceMenuFrame
</UL>

<P><STRONG><a name="[188]"></a>calcButParam</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, servicemenuframe.o(.text.calcButParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = calcButParam &rArr; TC_addButton &rArr; Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshScrollBarServiceMenuFrame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFrame
</UL>

<P><STRONG><a name="[1a8]"></a>createFrame</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, regenperiodserviceframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRegenPeriodServiceFrame
</UL>

<P><STRONG><a name="[1b0]"></a>createFrame</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, washingtimeserviceframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWashingTimeServiceFrame
</UL>

<P><STRONG><a name="[1b2]"></a>createFrame</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, watercountbeforeregen.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarOkCancel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWaterCountBeforeRegenFrame
</UL>

<P><STRONG><a name="[1f3]"></a>createFrame</STRONG> (Thumb, 370 bytes, Stack size 104 bytes, serviceinfo.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFormatedTimeFromSource
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareDate
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMonth
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTextLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceInfoFrame
</UL>

<P><STRONG><a name="[1f4]"></a>createFrame</STRONG> (Thumb, 370 bytes, Stack size 80 bytes, servicedateselect.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFillButton
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showServiceDateSelectFrame
</UL>

<P><STRONG><a name="[1f5]"></a>createFrame</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, loadtypeframe.o(.text.createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = createFrame &rArr; drawClock &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawClock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_clearButtons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_addButton
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStatusBarEmpty
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawStaticLines
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawMainBar
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLoadTypeFrame
</UL>

<P><STRONG><a name="[6e]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[225]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[220]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
